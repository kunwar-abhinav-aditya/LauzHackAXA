package com.lauzhack.axa;

import java.util.ArrayList;
import java.util.List;

import org.bson.Document;

import com.mongodb.MongoClient;
import com.mongodb.ServerAddress;
import com.mongodb.client.FindIterable;
import com.mongodb.client.MongoCollection;
import com.mongodb.client.MongoDatabase;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.Page;
import com.vaadin.server.VaadinSession;
import com.vaadin.server.WrappedSession;
import com.vaadin.ui.Button;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Button.ClickEvent;

public class StudentProfileView extends VerticalLayout implements View {

	static MongoClient mongo;
	static MongoDatabase db;
	static MongoCollection<Document> collection;
	static MongoCollection<Document> collection_ds;
	protected static final String LOGINVIEW = "";
	protected static final String HOSTSGRIDVIEW = "hostsgridview";
	static FormLayout form = new FormLayout();
	static List<Host> hosts = new ArrayList();
	
	public StudentProfileView() {
	}
	
	@Override
	public void enter(ViewChangeEvent event) {
		form = new FormLayout();
		form.addComponent(new Label("Welcome"));
		hosts = getHostsAvailable();
		form.addComponent(new Label("You have "+hosts.size()+" new matches!"));
    	Button seeDetails = new Button("Click for More!", new Button.ClickListener() {
            @Override
        	public void buttonClick(ClickEvent event) {
            	getUI().getNavigator().navigateTo(HOSTSGRIDVIEW);
        	}
        });
    	form.addComponent(seeDetails);
    	Button logout = new Button("Logout", new Button.ClickListener() {
            @Override
        	public void buttonClick(ClickEvent event) {
            	VaadinSession vSession = VaadinSession.getCurrent();
            	WrappedSession httpSession = vSession.getSession();
            	httpSession.invalidate();
            	Page.getCurrent().setLocation("/axa");
        	}
        });
		form.addComponent(logout);
		addComponent(form);
		getUI().getSession().setAttribute("hosts", hosts);
		String user = (String) getUI().getSession().getAttribute("username");
		System.out.println(user);
	}

	private List<Host> getHostsAvailable() {
		MongoClient mongo = new MongoClient(new ServerAddress("localhost", 27017));
        db = mongo.getDatabase("homely");
        collection = db.getCollection("hosts");
        FindIterable<Document> hostsAvailable= collection.find();
        List<Host> hostsList = new ArrayList<>();
        for (Document hoster : hostsAvailable) {
        	Host host = new Host();
        	host.setFirstName((String) hoster.get("firstName"));
        	host.setFamilyName((String)hoster.get("familyName"));
        	host.setCountry((String)hoster.get("country"));
        	host.setInterests((String)hoster.get("interests"));
        	host.setEmail((String)hoster.get("email"));
        	host.setTelephone((String)hoster.get("telephone"));
        	hostsList.add(host);
        }
        return hostsList;
	}
}
