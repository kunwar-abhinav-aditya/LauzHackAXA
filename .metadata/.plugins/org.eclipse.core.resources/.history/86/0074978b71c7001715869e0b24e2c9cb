package com.lauzhack.axa;

import java.io.BufferedReader;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.List;

import com.vaadin.data.validator.StringLengthValidator;
import com.vaadin.navigator.View;
import com.vaadin.navigator.ViewChangeListener.ViewChangeEvent;
import com.vaadin.server.FontAwesome;
import com.vaadin.server.StreamResource;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.ComboBox;
import com.vaadin.ui.DateField;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.FormLayout;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.PasswordField;
import com.vaadin.ui.ProgressIndicator;
import com.vaadin.ui.TextArea;
import com.vaadin.ui.TextField;
import com.vaadin.ui.Upload;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.ui.Upload.Receiver;

public class HostRegisterView extends VerticalLayout implements View {

	protected static final String HOSTPROFILE = "hostprofile";
    private MyReceiver receiver = new MyReceiver();
    private Upload upload = new Upload(null, receiver);
    private Label status = new Label("Please select a file to upload");
    final ByteArrayOutputStream baos = new ByteArrayOutputStream();
    private ProgressIndicator pi = new ProgressIndicator();
    private HorizontalLayout progressLayout = new HorizontalLayout();
	
	@Override
	public void enter(ViewChangeEvent event) {
		
    	setWidth("100%");
    	setHeight("100%");
    	
    	RegisterHost regHost = new RegisterHost();
    	HorizontalLayout hzr = new HorizontalLayout();
    	Host host = new Host();
    	hzr.setWidth("100%");
    	hzr.setHeight("100%");
    	//Form's left half
		FormLayout form = new FormLayout();
		form.setWidth("60%");
		form.setHeight("100%");
		
		TextField tf1 = new TextField("Your first name");
		tf1.setIcon(FontAwesome.USER);
        tf1.setBuffered(true);
        tf1.addValidator(new StringLengthValidator(
            "First name can't be empty (input: {0})",
            1, 100, true));
		form.addComponent(tf1);

		TextField tf2 = new TextField("Your family name");
		tf2.setIcon(FontAwesome.USER);
        tf2.setBuffered(true);
        tf2.addValidator(new StringLengthValidator(
            "Family name can't be empty (input: {0})",
            1, 100, true));
		form.addComponent(tf2);
		
		TextField tf16 = new TextField("Username");
		tf16.setIcon(FontAwesome.USER);
        tf16.setBuffered(true);
        tf16.addValidator(new StringLengthValidator(
            "Username can't be empty (input: {0})",
            1, 100, true));
		form.addComponent(tf16);

		PasswordField tf17 = new PasswordField("Password");
		tf17.setIcon(FontAwesome.KEY);
        tf17.setBuffered(true);
        tf17.addValidator(new StringLengthValidator(
            "Password can't be empty (input: {0})",
            1, 100, true));
		form.addComponent(tf17);
		
		TextArea tf3 = new TextArea("Complete address");
		tf3.setIcon(FontAwesome.ROAD);
        tf16.setBuffered(true);
        tf16.addValidator(new StringLengthValidator(
            "Username can't be empty (input: {0})",
            1, 100, true));
		form.addComponent(tf3);

		TextField tf4 = new TextField("Postal code");
		tf4.setIcon(FontAwesome.ENVELOPE);
		form.addComponent(tf4);
		
		System.out.println("Working Directory = " +
	              System.getProperty("user.dir"));
		
		List countries = new ArrayList<>();
		BufferedReader br;
		try {
			br = new BufferedReader(new FileReader("C:\\Users\\Kunwar_HRForecast\\Desktop\\Lauzhack_AXA\\axa\\src\\main\\resources\\countries.txt"));
			String line = br.readLine();
		    while (line != null) {
		    	countries.add(line);
		        line = br.readLine();
		    }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		
		ComboBox tf5 = new ComboBox("Country");
		tf5.setIcon(FontAwesome.FLAG);
		tf5.addItems(countries);
		form.addComponent(tf5);
	
		List nationalities = new ArrayList<>();
		try {
			br = new BufferedReader(new FileReader("C:\\Users\\Kunwar_HRForecast\\Desktop\\Lauzhack_AXA\\axa\\src\\main\\resources\\nationalities.txt"));
			String line = br.readLine();
		    while (line != null) {
		    	nationalities.add(line);
		        line = br.readLine();
		    }
		} catch (FileNotFoundException e) {
			e.printStackTrace();
		}
		catch (IOException e) {
			e.printStackTrace();
		}
		
		ComboBox tf6 = new ComboBox("Nationality");
		tf6.setIcon(FontAwesome.USERS);
		tf6.addItems(nationalities);
		form.addComponent(tf6);
	
		List genders = new ArrayList<>();
		genders.add("Male");
		genders.add("Female");
		genders.add("Don't specify");
		
		ComboBox tf7 = new ComboBox("Gender");
		tf7.setIcon(FontAwesome.TRANSGENDER_ALT);
		tf7.addItems(genders);
		form.addComponent(tf7);
		
		DateField tf8 = new DateField("Date of Birth");
		tf8.setIcon(FontAwesome.CALENDAR_TIMES_O);
		form.addComponent(tf8);
		
		TextField tf9 = new TextField("Telephone");
		tf9.setIcon(FontAwesome.PHONE);
		form.addComponent(tf9);
		
		hzr.addComponent(form);
		hzr.setComponentAlignment(form, Alignment.MIDDLE_RIGHT);
		//Form's right half
		FormLayout formright = new FormLayout();
		
		formright.setWidth("60%");
		formright.setHeight("100%");
		
		TextField tf10 = new TextField("Email");
		tf10.setIcon(FontAwesome.MAIL_FORWARD);
		formright.addComponent(tf10);
		
		TextField tf11 = new TextField("Religion");
		tf11.setIcon(FontAwesome.STAR);
		formright.addComponent(tf11);
		
		TextField tf12 = new TextField("Interests");
		tf12.setIcon(FontAwesome.MOTORCYCLE);
		formright.addComponent(tf12);
		
		TextField tf13 = new TextField("Languages known");
		tf13.setIcon(FontAwesome.LANGUAGE);
		formright.addComponent(tf13);
		
		List maritalStatus = new ArrayList<>();
		maritalStatus.add("Single");
		maritalStatus.add("Married");
		maritalStatus.add("Divorced");
		
		ComboBox tf15 = new ComboBox("Marital Status");
		tf15.setIcon(FontAwesome.VENUS_MARS);
		tf15.addItems(maritalStatus);
		formright.addComponent(tf15);
		
		TextArea tf14 = new TextArea("Why do you want to be a host family?");
		tf14.setIcon(FontAwesome.USER_PLUS);
		formright.addComponent(tf14);
		
		//formright.addComponent(status);
		formright.addComponent(upload);
		//formright.addComponent(progressLayout);
		
		//upload.setImmediate(true);
		Embedded preview = new Embedded("Uploaded Image");
		preview.setVisible(false);
		upload.setCaption("Select file");
		
        //progressLayout.setSpacing(true);
        //progressLayout.setVisible(false);
        //progressLayout.addComponent(pi);
        //progressLayout.setComponentAlignment(pi, Alignment.MIDDLE_LEFT);

        //final Button cancelProcessing = new Button("Cancel");
        //cancelProcessing.addListener(new Button.ClickListener() {
         //   public void buttonClick(ClickEvent event) {
          //      upload.interruptUpload();
           // }
        //});
        //cancelProcessing.setStyleName("small");
        //progressLayout.addComponent(cancelProcessing);

        /**
         * =========== Add needed listener for the upload component: start,
         * progress, finish, success, fail ===========
         */

        upload.setReceiver(new Receiver() {
			
			@Override
			public OutputStream receiveUpload(String filename, String mimeType) {
				return baos;
			}
		});
        
        /*
        upload.addListener(new Upload.StartedListener() {
            public void uploadStarted(StartedEvent event) {
                // This method gets called immediatedly after upload is started
                upload.setVisible(false);
                progressLayout.setVisible(true);
                pi.setValue(0f);
                pi.setPollingInterval(500);
                status.setValue("Uploading file \"" + event.getFilename()
                        + "\"");
            }
        });

        upload.addListener(new Upload.ProgressListener() {
            public void updateProgress(long readBytes, long contentLength) {
                // This method gets called several times during the update
                pi.setValue(new Float(readBytes / (float) contentLength));
            }

        });

        upload.addListener(new Upload.SucceededListener() {
            public void uploadSucceeded(SucceededEvent event) {
                // This method gets called when the upload finished successfully
                status.setValue("Uploading file \"" + event.getFilename()
                        + "\" succeeded");
            }
        });

        upload.addListener(new Upload.FailedListener() {
            public void uploadFailed(FailedEvent event) {
                // This method gets called when the upload failed
                status.setValue("Uploading interrupted");
            }
        });
		
        upload.addListener(new Upload.FinishedListener() {
            public void uploadFinished(FinishedEvent event) {
                // This method gets called always when the upload finished,
                // either succeeding or failing
                progressLayout.setVisible(false);
                upload.setVisible(true);
                upload.setCaption("Select another file");
            }
        });
        */
        final byte[] bytes = null;
        upload.addSucceededListener(new Upload.SucceededListener() {
            @Override
            public void uploadSucceeded(Upload.SucceededEvent succeededEvent) {
            	final byte[] bytes = baos.toByteArray();
            	System.out.println("Upload successful");
                preview.setVisible(true);
                preview.setSource(new StreamResource(new StreamResource.StreamSource() {
                    @Override
                    public InputStream getStream() {
                        return new ByteArrayInputStream(bytes);
                    }
                }, ""));

            }
        });
        
        
		Button submit = new Button("Submit", new Button.ClickListener() {
            @Override
        	public void buttonClick(ClickEvent event) {
            	host.setFirstName(tf1.getValue());
            	host.setFamilyName(tf2.getValue());
            	host.setAddress(tf3.getValue());
            	host.setPostalCode(Integer.parseInt(tf4.getValue()));
            	host.setCountry((String)tf5.getValue());
            	host.setNationality((String)tf6.getValue());
            	host.setGender((String)tf7.getValue());
            	host.setDob(tf8.getValue());
            	host.setTelephone(tf9.getValue());
            	host.setEmail(tf10.getValue());
            	host.setReligion(tf11.getValue());
            	host.setInterests(tf12.getValue());
            	host.setLanguages(tf13.getValue());
            	host.setReason(tf14.getValue());
            	host.setMaritalStatus((String)tf15.getValue());
            	host.setUserName(tf16.getValue());
            	host.setPassword(tf17.getValue());
            	host.setImage(preview);
            	
            	int res = regHost.register(host);
            	if (res == 1) {
            		getUI().getSession().setAttribute("username", host.getUserName());
            		getUI().getNavigator().navigateTo(HOSTPROFILE);
            	}
            	else {
            		getUI().getNavigator().navigateTo(HOSTPROFILE);
            	}
        	}
        });
        
		formright.addComponent(submit);
		
		hzr.addComponent(formright);
		hzr.setComponentAlignment(formright, Alignment.MIDDLE_LEFT);
		addComponent(hzr);

	}
	   
	public static class MyReceiver implements Receiver {

	        private String fileName;
	        private String mtype;
	        private boolean sleep;
	        private int total = 0;

	        public OutputStream receiveUpload(String filename, String mimetype) {
	            fileName = filename;
	            mtype = mimetype;
	            return new OutputStream() {
	                @Override
	                public void write(int b) throws IOException {
	                    total++;
	                    if (sleep && total % 10000 == 0) {
	                        try {
	                            Thread.sleep(100);
	                        } catch (InterruptedException e) {
	                            // TODO Auto-generated catch block
	                            e.printStackTrace();
	                        }
	                    }
	                }
	            };
	        }

	        public String getFileName() {
	            return fileName;
	        }

	        public String getMimeType() {
	            return mtype;
	        }

	        public void setSlow(boolean value) {
	            sleep = value;
	        }
	    }


}
